// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(CapellaDbContext))]
    [Migration("20230813135846_mig123123122")]
    partial class mig123123122
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductsId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductsCategories", (string)null);
                });

            modelBuilder.Entity("ClassificationAttributeValueOptions", b =>
                {
                    b.Property<int>("ClassificationAttributeValuesId")
                        .HasColumnType("integer");

                    b.Property<int>("OptionsId")
                        .HasColumnType("integer");

                    b.HasKey("ClassificationAttributeValuesId", "OptionsId");

                    b.HasIndex("OptionsId");

                    b.ToTable("ClassificationAttributeValuesOptions", (string)null);
                });

            modelBuilder.Entity("ClassificationAttributeValueProduct", b =>
                {
                    b.Property<int>("ClassificationAttributeValuesId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductsId")
                        .HasColumnType("integer");

                    b.HasKey("ClassificationAttributeValuesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductsClassificationAttributeValues", (string)null);
                });

            modelBuilder.Entity("ClassificationAttributeValueVariantItem", b =>
                {
                    b.Property<int>("ClassificationAttributeValuesId")
                        .HasColumnType("integer");

                    b.Property<int>("VariantItemsId")
                        .HasColumnType("integer");

                    b.HasKey("ClassificationAttributeValuesId", "VariantItemsId");

                    b.HasIndex("VariantItemsId");

                    b.ToTable("ClassificationAttributeValuesVariantItems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Neighbourhood")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("BannerType")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GalleryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "alfa_beta",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(8924),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(8926),
                            Name = "Alfa Beta"
                        },
                        new
                        {
                            Id = 2,
                            Code = "june",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(8928),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(8929),
                            Name = "June"
                        },
                        new
                        {
                            Id = 3,
                            Code = "brooks_brothers",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(8930),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(8930),
                            Name = "Brooks Brothers"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "clothes",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9100),
                            Description = "Giyim",
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9100),
                            Level = 1,
                            Name = "Giyim",
                            Slug = "category-1"
                        },
                        new
                        {
                            Id = 2,
                            Code = "man",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9111),
                            Description = "Erkek",
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9111),
                            Level = 1,
                            Name = "Erkek",
                            ParentCategoryId = 1,
                            Slug = "category-2"
                        },
                        new
                        {
                            Id = 3,
                            Code = "woman",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9112),
                            Description = "Kadın",
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9112),
                            Level = 2,
                            Name = "Kadın",
                            ParentCategoryId = 1,
                            Slug = "category-3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Classifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "gender",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9117),
                            DataType = 3,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9117),
                            Name = "Cinsiyet"
                        },
                        new
                        {
                            Id = 2,
                            Code = "pattern",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9118),
                            DataType = 0,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9119),
                            Name = "Kalıp"
                        },
                        new
                        {
                            Id = 3,
                            Code = "stil",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9119),
                            DataType = 4,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9120),
                            Name = "Stil"
                        },
                        new
                        {
                            Id = 4,
                            Code = "warranty_period",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9120),
                            DataType = 1,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9120),
                            Name = "Garanti Süresi"
                        },
                        new
                        {
                            Id = 5,
                            Code = "international_sales",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9121),
                            DataType = 2,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9121),
                            Name = "Yurt Dışı Satış"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ClassificationAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassificationId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.ToTable("ClassificationAttributeValues");
                });

            modelBuilder.Entity("Domain.Entities.ContentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContentCategories");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Domain.Entities.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gallery");
                });

            modelBuilder.Entity("Domain.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AbsolutePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ContentCategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("EncodedFilename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GalleryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MediaFormatId")
                        .HasColumnType("integer");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RealFilename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RootPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Secure")
                        .HasColumnType("boolean");

                    b.Property<string>("ServePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContentCategoryId");

                    b.HasIndex("GalleryId");

                    b.HasIndex("MediaFormatId");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Domain.Entities.MediaFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MediaFormatType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MediaFormats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "icon",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9158),
                            Height = 100,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9158),
                            MediaFormatType = 0,
                            Name = "100x100",
                            Width = 100
                        },
                        new
                        {
                            Id = 2,
                            Code = "small",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9159),
                            Height = 200,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9160),
                            MediaFormatType = 0,
                            Name = "200x200",
                            Width = 200
                        },
                        new
                        {
                            Id = 3,
                            Code = "thumbnail",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9160),
                            Height = 300,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9161),
                            MediaFormatType = 0,
                            Name = "300x300",
                            Width = 300
                        },
                        new
                        {
                            Id = 4,
                            Code = "medium",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9161),
                            Height = 400,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9162),
                            MediaFormatType = 0,
                            Name = "400x400",
                            Width = 400
                        },
                        new
                        {
                            Id = 5,
                            Code = "big",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9162),
                            Height = 500,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9163),
                            MediaFormatType = 0,
                            Name = "500x500",
                            Width = 500
                        },
                        new
                        {
                            Id = 6,
                            Code = "huge",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9163),
                            Height = 600,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9164),
                            MediaFormatType = 0,
                            Name = "600x600",
                            Width = 600
                        },
                        new
                        {
                            Id = 7,
                            Code = "zoom",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9164),
                            Height = 700,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9165),
                            MediaFormatType = 0,
                            Name = "700x700",
                            Width = 700
                        },
                        new
                        {
                            Id = 8,
                            Code = "superzoom",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9165),
                            Height = 800,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9166),
                            MediaFormatType = 0,
                            Name = "800x800",
                            Width = 800
                        },
                        new
                        {
                            Id = 9,
                            Code = "original",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9166),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9167),
                            MediaFormatType = 4,
                            Name = "original"
                        },
                        new
                        {
                            Id = 10,
                            Code = "carousel_back",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9167),
                            Height = 470,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9168),
                            MediaFormatType = 1,
                            Name = "1300X470",
                            Width = 1300
                        },
                        new
                        {
                            Id = 11,
                            Code = "card",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9168),
                            Height = 200,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9169),
                            MediaFormatType = 3,
                            Name = "400X200",
                            Width = 400
                        });
                });

            modelBuilder.Entity("Domain.Entities.Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassificationId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassificationId = 1,
                            Code = "male",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9142),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9143),
                            Name = "Erkek"
                        },
                        new
                        {
                            Id = 2,
                            ClassificationId = 1,
                            Code = "female",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9144),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9144),
                            Name = "Kadın"
                        },
                        new
                        {
                            Id = 3,
                            ClassificationId = 3,
                            Code = "evening_dresses",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9145),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9145),
                            Name = "Abiye"
                        },
                        new
                        {
                            Id = 4,
                            ClassificationId = 3,
                            Code = "night",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9145),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9146),
                            Name = "Gece"
                        },
                        new
                        {
                            Id = 5,
                            ClassificationId = 3,
                            Code = "daily",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9146),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9147),
                            Name = "Günlük"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "product_created",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9270),
                            Description = "Ürün oluşturmak için gerekli izin",
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9270),
                            Name = "Ürün Oluşturma Yetkisi"
                        },
                        new
                        {
                            Id = 2,
                            Code = "product_deleted",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9271),
                            Description = "Ürün silmek için gerekli izin",
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9271),
                            Name = "Ürün Silme Yetkisi"
                        },
                        new
                        {
                            Id = 3,
                            Code = "product_updated",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9272),
                            Description = "Ürün güncelleme için gerekli izin",
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9272),
                            Name = "Ürün Güncelleme Yetkisi"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "admin",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9286),
                            IsActive = true,
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9287),
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Atatürk Mah. Orhan Veli Caddesi No:6 34522 Esenyurt İstanbul Türkiye",
                            Code = "supplier_1",
                            Company = "Ozon Tekstil",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9266),
                            Email = "ozontekstil@gmail.com",
                            EmployeeName = "Duygu Sivrioğlu",
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9266),
                            Name = "Elbise Tedarikçim",
                            TaxNumber = "123456789",
                            Telephone = "0212 886 69 86"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "new_member_special",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9182),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9182),
                            Name = "Yeni Üyelere Özel"
                        },
                        new
                        {
                            Id = 2,
                            Code = "premium_member_special",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9183),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9183),
                            Name = "Premium Üyelere Özel"
                        },
                        new
                        {
                            Id = 3,
                            Code = "super_discount",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9184),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9184),
                            Name = "Süper İndirim"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Variants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "size",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9189),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9189),
                            Name = "Beden"
                        },
                        new
                        {
                            Id = 2,
                            Code = "color",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9190),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9190),
                            Name = "Renk"
                        });
                });

            modelBuilder.Entity("Domain.Entities.VariantItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("VariantItems");
                });

            modelBuilder.Entity("Domain.Entities.VariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VariantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "s",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9209),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9209),
                            Name = "S",
                            VariantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "m",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9210),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9210),
                            Name = "M",
                            VariantId = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = "l",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9212),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9212),
                            Name = "L",
                            VariantId = 1
                        },
                        new
                        {
                            Id = 4,
                            Code = "blue",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9213),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9213),
                            Name = "Mavi",
                            VariantId = 2
                        },
                        new
                        {
                            Id = 5,
                            Code = "black",
                            CreatedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9214),
                            LastModifiedDate = new DateTime(2023, 8, 13, 13, 58, 46, 210, DateTimeKind.Utc).AddTicks(9214),
                            Name = "Siyah",
                            VariantId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpenAdress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("GalleryProduct", b =>
                {
                    b.Property<int>("GalleriesId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductsId")
                        .HasColumnType("integer");

                    b.HasKey("GalleriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("GalleryProduct");
                });

            modelBuilder.Entity("GalleryVariantItem", b =>
                {
                    b.Property<int>("GalleriesId")
                        .HasColumnType("integer");

                    b.Property<int>("VariantItemsId")
                        .HasColumnType("integer");

                    b.HasKey("GalleriesId", "VariantItemsId");

                    b.HasIndex("VariantItemsId");

                    b.ToTable("GalleriesVariantItems", (string)null);
                });

            modelBuilder.Entity("MediaProduct", b =>
                {
                    b.Property<int>("MediasId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductsId")
                        .HasColumnType("integer");

                    b.HasKey("MediasId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductsMedias", (string)null);
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("integer");

                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RolesPermissions", (string)null);
                });

            modelBuilder.Entity("ProductTag", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("ProductsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ProductsTags", (string)null);
                });

            modelBuilder.Entity("ProductVariant", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("integer");

                    b.Property<int>("VariantsId")
                        .HasColumnType("integer");

                    b.HasKey("ProductsId", "VariantsId");

                    b.HasIndex("VariantsId");

                    b.ToTable("ProductsVariants", (string)null);
                });

            modelBuilder.Entity("ProductVariantItem", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("integer");

                    b.Property<int>("VariantItemsId")
                        .HasColumnType("integer");

                    b.HasKey("ProductsId", "VariantItemsId");

                    b.HasIndex("VariantItemsId");

                    b.ToTable("ProductsVariantItems", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("VariantItemVariantValue", b =>
                {
                    b.Property<int>("VariantItemsId")
                        .HasColumnType("integer");

                    b.Property<int>("VariantValuesId")
                        .HasColumnType("integer");

                    b.HasKey("VariantItemsId", "VariantValuesId");

                    b.HasIndex("VariantValuesId");

                    b.ToTable("VariantValuesVariantItems", (string)null);
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassificationAttributeValueOptions", b =>
                {
                    b.HasOne("Domain.Entities.ClassificationAttributeValue", null)
                        .WithMany()
                        .HasForeignKey("ClassificationAttributeValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Options", null)
                        .WithMany()
                        .HasForeignKey("OptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassificationAttributeValueProduct", b =>
                {
                    b.HasOne("Domain.Entities.ClassificationAttributeValue", null)
                        .WithMany()
                        .HasForeignKey("ClassificationAttributeValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassificationAttributeValueVariantItem", b =>
                {
                    b.HasOne("Domain.Entities.ClassificationAttributeValue", null)
                        .WithMany()
                        .HasForeignKey("ClassificationAttributeValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VariantItem", null)
                        .WithMany()
                        .HasForeignKey("VariantItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Banner", b =>
                {
                    b.HasOne("Domain.Entities.Gallery", "Gallery")
                        .WithMany("Banners")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.HasOne("Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.ClassificationAttributeValue", b =>
                {
                    b.HasOne("Domain.Entities.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classification");
                });

            modelBuilder.Entity("Domain.Entities.District", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.Media", b =>
                {
                    b.HasOne("Domain.Entities.ContentCategory", "ContentCategory")
                        .WithMany("Medias")
                        .HasForeignKey("ContentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Gallery", null)
                        .WithMany("Medias")
                        .HasForeignKey("GalleryId");

                    b.HasOne("Domain.Entities.MediaFormat", "MediaFormat")
                        .WithMany("Medias")
                        .HasForeignKey("MediaFormatId");

                    b.Navigation("ContentCategory");

                    b.Navigation("MediaFormat");
                });

            modelBuilder.Entity("Domain.Entities.Options", b =>
                {
                    b.HasOne("Domain.Entities.Classification", "Classification")
                        .WithMany("Options")
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classification");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Domain.Entities.VariantValue", b =>
                {
                    b.HasOne("Domain.Entities.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("District");
                });

            modelBuilder.Entity("GalleryProduct", b =>
                {
                    b.HasOne("Domain.Entities.Gallery", null)
                        .WithMany()
                        .HasForeignKey("GalleriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GalleryVariantItem", b =>
                {
                    b.HasOne("Domain.Entities.Gallery", null)
                        .WithMany()
                        .HasForeignKey("GalleriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VariantItem", null)
                        .WithMany()
                        .HasForeignKey("VariantItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaProduct", b =>
                {
                    b.HasOne("Domain.Entities.Media", null)
                        .WithMany()
                        .HasForeignKey("MediasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductTag", b =>
                {
                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductVariant", b =>
                {
                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Variant", null)
                        .WithMany()
                        .HasForeignKey("VariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductVariantItem", b =>
                {
                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VariantItem", null)
                        .WithMany()
                        .HasForeignKey("VariantItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VariantItemVariantValue", b =>
                {
                    b.HasOne("Domain.Entities.VariantItem", null)
                        .WithMany()
                        .HasForeignKey("VariantItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VariantValue", null)
                        .WithMany()
                        .HasForeignKey("VariantValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Domain.Entities.Classification", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entities.ContentCategory", b =>
                {
                    b.Navigation("Medias");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Gallery", b =>
                {
                    b.Navigation("Banners");

                    b.Navigation("Medias");
                });

            modelBuilder.Entity("Domain.Entities.MediaFormat", b =>
                {
                    b.Navigation("Medias");
                });

            modelBuilder.Entity("Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Variant", b =>
                {
                    b.Navigation("VariantValues");
                });
#pragma warning restore 612, 618
        }
    }
}
